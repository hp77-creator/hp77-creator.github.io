{"type":"data","nodes":[null,{"type":"data","data":[{"post":1},{"slug":2,"title":3,"date":4,"description":5,"content":6,"visible":7,"tags":8},"git-worktree-debug","TIL - Git worktree & WCGW even after Server processes request sucessfully","2025-03-28","Learning more on internals of Git & Web Server","\nI am currently working on an internal tool where I am tasked with creating a microservice to interact with a client. Tech stack that we use in my organization\nis mostly in Java(Spring-boot). Spring-boot is such a powerful and beautiful framework. You can create servers so easily. It's IOC(Inversion of\ncontrol) paradigm, it's autoconfiguration and dependency management all lead to a wonderful developer experience.\n\nI mapped an endpoint in my controller like following:\n```java\n\n@PostMapping(\"/post/text\")\npublic ResponseEntity\u003CText> addText(@Valid @RequestBody RequestBody request) {\n    return Response.ok(dependentService.addText(request));\n}\n```\nIt was a pretty simple endpoint, and in the service implementation, I was simply saving whatever the user was sending from their end, ofc with validations.\nI ran the server, It compiled and then executed without any error, Server was up. I hit my create request using an http client, \nI observed a strange thing, I see that server is returning me a `500` with some `Internal Server Exception`, I thought let's check the server logs, there might\nbe something that I missed.\nTo my shock, there was nothing in server logs, nada. It baffled me even more, I was like what went wrong here. I put some debugger points and checked with that, inside service, function is returning expected response, inside controller, If I execute the return statement separately, using `Evaluate expression` of IntelliJ, I see correct response, so I continue the execution and again same error.\n\nWell, At this point, I was questioning my configuration, did I mess up anything there, I don't know, I looked around, took reference from other services, I was \nfollowing what should be followed but I was getting error meanwhile other services were working fine and worst part, I didn't know from where the error was coming. I approached with this problem to my colleague, they mentioned they have seen this same issue before, they suggested to add a configuration for `ObjectMapper`, of course, the error must be happening in the serialization layer, logs for that are not shown by default. To see that, I added following lines in the \n`application.properties`\n```\nlogging.level.org.springframework.web=debug\nlogging.level.com.fasterxml.jackson.databind=debug\n```\nAnd indeed, Error was occuring because of a model mismatch. I fixed that model and then the issue was resolved. This incident made me realize how much we take \nfor granted different abstractions that frameworks provide, It prompted me to always think in terms of first principle whenever we get stuck and look beyond \nabstractions provided by your framework.\n\n---\n\nGit Worktree\n\nHave you ever had a project, where you were working on a branch, you have some changes which are not committed but then you receive a requirement which needs a new branch from your `main`. What would you do in this case?\n\nBefore today, I would have done `git stash`, switch `HEAD` to `main` and then create another branch from there and work on the higher priority feature/fix. \nBut Today I learned that there exists something like `git worktree` and it is such a wonderful command. Essentially it creates a new repo for you from your existing git objects from the branch that you mention, example:\n```shell\ngit worktree add -b emergency-fix ../temp master\n```\nAbove command will create a new repo in your parent directory with name `temp` and switch to `emergency-fix` branch and you can simply `cd` or (`pushd`) into it and start working on your fix, when \ndone you can simply commit from the new directory and then switch back to your old directory.\n\nThis command legit helps you have multiple context for your project, It extends the concept of branch, I was reading more about it in `Mastering Git` and during\nmy read, I learnt that it has been there for long time and It was shock for me that during my entire college years and now dev years, I didn't see it being \nmentioned much. \nI am modifying my git workflow to include this command and have better separation for concern for different features. Features like this make you realize how much you don't know about some of the tools that you think you might be knowing a lot. Answer is to always `Stay curious`.\n\nWorkflow that I am switching to, if there's any feature that I need to work on, what I do is\n```shell\ngit worktree add -b account_api_fix ../api-fix main \n```\n`-b` creates a new branch, `../api-fix` creates a new worktree in the parent directory of current location, `main` is for from where it \nshould branch the new branch and create the worktree.\n\nAfter work is done, I simply do\n```shell\ngit worktree remove \u003Cworktree-name>\n```\nabove command removes the worktree from the `git` object and also removes the extra created directory.\n\n\nAlso, Would like to mention that when you change your directory, you might have to reinstall your dependencies which you normally ignore, example `venv` dir in `python` and `node_modules` in `Javascript`\n\n---- \n\n## References\n\n- [Mastering Git](https://www.amazon.in/Mastering-Git-Jakub-Narebski/dp/1783553758)\n- [Git Worktree documentation](https://git-scm.com/docs/git-worktree)\n",true,[9,10,11],"git","java","spring-boot"],"uses":{"params":["slug"]}}]}
