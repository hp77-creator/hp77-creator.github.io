{"type":"data","nodes":[null,{"type":"data","data":[{"post":1},{"slug":2,"title":3,"date":4,"description":5,"content":6,"visible":7,"tags":8},"about-mudlet","Mudlet through an open source contributor's eyes","2025-01-23","lessons on navigating a large C++ project and understanding it","\nMudlet, it is an open source application which can be used to play multiplayer text games. It is written in C++ and uses Qt framework for its UI content. It uses raw pointers and is devoid of RAII(I am trying to fix some with this PR: https://github.com/Mudlet/Mudlet/pull/7642)\n\nWhen you first visit Mudlet, you might feel excited to try it instantly, you can download it from here(insert link here) and if you want to contribute\nto it then you will have to learn how to setup your environment, you can refere following guide to get started.\n\nThe project is very huge so there are multiple commands that you have to execute to get the application started. You can refer following script for that\n```shell\nmkdir -p build && cd build && rm -rf *\ncmake ../../Mudlet-go -DCMAKE_PREFIX_PATH=`brew --prefix qt@5` -DUSE_UPDATER=OFF\nmake -j `sysctl -n hw.ncpu`\nsrc/mudlet.app/Contents/MacOS/mudlet\n```\nNote: Make sure to run this script from inside the repo main directory or you might loose all of your changes.\nI am currently looking to add feature to add support for voice-readers to read the found result, for more info: . The issue was that result was found\nit was highlighted as well but the caret which is used by the voice-readers to get the context for their dictation was not setting up properly.\nI fixed that and added a key shortcut to enable this setting. To integrate shortcut, I used the existing `lua` scripts and added option for the same.\n\nIn the process, I learned that there are some games that might have their own implementation for `F3` (key that I have configured to access the results) and that could mess up the search navigation.\n\nIf you want to run the program with `address` or `leak` sanitizers, you can use the following script to do that\nI ran this on a MacOS system(specifically m2 air):\n```shell\n#!/bin/bash\n\n# Create and clean build directory\nmkdir -p build && cd build && rm -rf *\n\n# Configure with memory leak detection\ncmake ../../Mudlet-go \\\n    -DCMAKE_PREFIX_PATH=`brew --prefix qt@5` \\\n    -DUSE_UPDATER=OFF \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -DCMAKE_C_COMPILER=\"$(brew --prefix llvm)/bin/clang\" \\\n    -DCMAKE_CXX_COMPILER=\"$(brew --prefix llvm)/bin/clang++\" \\\n    -DCMAKE_CXX_FLAGS=\"-fsanitize=address -fno-omit-frame-pointer\" \\\n    -DCMAKE_C_FLAGS=\"-fsanitize=address -fno-omit-frame-pointer\" \\\n    -DCMAKE_EXE_LINKER_FLAGS=\"-fsanitize=address\"\n\n# Build using available cores\nmake -j `sysctl -n hw.ncpu`\n\n# Run with memory leak detection\nASAN_OPTIONS=detect_leaks=1:leak_check_at_exit=1:verbosity=1 src/mudlet.app/Contents/MacOS/mudlet 2>&1 | tee asan_output.log\n```\n\nWhen you build some C++ program, you have to first check the kind of build system project is using, most of the `C++` projects that I have come across `cmake` but there can be others like `bazel` and some custom ones ()[];\n\n---- \n\n## References\n\n- [Git remote branches](https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches)\n",false,[9],"C++"],"uses":{"params":["slug"]}}]}
