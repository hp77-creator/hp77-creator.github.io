{"type":"data","nodes":[null,{"type":"data","data":[{"post":1},{"slug":2,"title":3,"date":4,"description":5,"content":6,"visible":7,"tags":8},"building-understanding-mariaDB","Building and Running MariaDB on Macbook","2025-02-02","letting out the Seal in M-series (sea-ries XD)","\n## Building MariaDB\n\nMariaDB is a fork of MySQL which has been in effect to provide users the flexibility to go with an open source version for a DB like MySQL which is owned by Oracle. \nIt is written in C++. To build it on my system(macbook air M2) I followed these steps:\nWe are going to build the `server` which is where most of things happen for the DBMS\n\n- Fork the official repo: [Github](https://github.com/MariaDB/server)\n- Clone your forked repo: `git clone https://github.com/YOUR-USERNAME/server`\n First time the clone failed because of the following reason:\n ```shell\n git clone https://github.com/hp77-creator/my-maria-server.git\nCloning into 'my-maria-server'...\nremote: Enumerating objects: 1391033, done.\nremote: Counting objects: 100% (100/100), done.\nremote: Compressing objects: 100% (69/69), done.\nerror: RPC failed; curl 92 HTTP/2 stream 5 was not closed cleanly: CANCEL (err 8)\nerror: 2491 bytes of body are still expected\nfetch-pack: unexpected disconnect while reading sideband packet\nfatal: early EOF\nfatal: fetch-pack: invalid index-pack output\n ```\n Trying by increasing the buffer size:\n `git config --global http.postBuffer 524288000`\n  The error persists, so I switched to `ssh`\n  It got cloned.\n\n- Enter into your cloned directory: `cd my-maria-server`\n- Create a new build directory and change directory to that: `mkdir -p build && cd build`\n- We will create a `Debug` build. To do that, run: `cmake .. -DCMAKE_BUILD_TYPE=Debug`\n    During installation, I found out that `bison` was not installed properly, so I installed it with\n    `brew install bison` and updated my `$PATH` to use or you can use\n    ```\n    -DBISON_EXECUTABLE=/opt/homebrew/opt/bison/bin/bison\n    ```\n    option when using cmake\n- You can follow along this link: [MariaDB docs](https://mariadb.org/get-involved/getting-started-for-developers/get-code-build-test/)\n\nI had read in the book `Understanding MySQL Internals` that `MySQL` works best with `GCC`, so I thought I will try with\nthat but before that I ran it with default compiler provided by Apple(Clang) there were lot of errors and I was trying to run following commands:\n```\ncmake .. -DCMAKE_BUILD_TYPE=Debug\ncmake --build . --parallel 5\n```\nDuring `--build` it was giving a lot of errors. I looked up the meaning of different errors, those errors were because of strict nullability check by the compiler. To get over those, I added following options:\n\n> Note before running the following command, ensure that you have cleared your existing build directory.\n\n```\ncmake .. -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_C_FLAGS=\"-Wno-nullability-completeness\" \\\n-DCMAKE_CXX_FLAGS=\"-Wno-nullability-completeness\"\n```\nAlso if you like to log the errors, you can do the following during build:\n```\ncmake --build . --parallel 5 2>&1 | tee build.log\n```\nIt failed again, this time it was unable to find the standard `\u003Cstdint.h>` header. I checked up online, If I can find options to provide these headers specifically and  I did the following:\n```\ncmake .. -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_C_COMPILER=/usr/bin/clang \\\n-DCMAKE_CXX_COMPILER=/usr/bin/clang++ \\\n-DCMAKE_CXX_FLAGS=\"-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -isystem /Library/Developer/CommandLineTools/usr/include/c++/v1\" \\\n-DCMAKE_C_FLAGS=\"-isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include\"\n```\n\n> `isystem` adds system include paths, although ideally it should be added in your `CMakeLists.txt` file: [StackOverflow answer](https://stackoverflow.com/a/3371528/7116645)\n\nUsing the system compiler didn't work again, I thought, maybe I should use `Homebrew`'s version of `clang` as from experience I had found it better for cross-platform support.\n\nSo, I did the following:\n```\ncmake .. -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm/bin/clang \\\n-DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm/bin/clang++ \\\n-DCMAKE_CXX_FLAGS=\"-Wno-nullability-completeness\" \\\n-DCMAKE_C_FLAGS=\"-Wno-nullability-completeness\"\n```\n\n> You need to have `brew` version of clang installed: `brew install llvm`\n\nI felt maybe clang's libraries does not have `stdint` or maybe I am missing something but I thought, let's try with `GCC` as I had read it works fine elsewhere. so I installed gcc: `brew install gcc`\n```\ncmake .. -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_C_COMPILER=/opt/homebrew/opt/gcc/bin/gcc-14 \\\n-DCMAKE_CXX_COMPILER=/opt/homebrew/opt/gcc/bin/g++-14\n```\n\nThere were some errors on about `deined` usage and its portability concerns, so I added some more options:\n```\ncmake .. -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_C_COMPILER=/opt/homebrew/opt/gcc/bin/gcc-13 \\\n-DCMAKE_CXX_COMPILER=/opt/homebrew/opt/gcc/bin/g++-13 \\\n-DCMAKE_CXX_FLAGS=\"-Wno-error=expansion-to-defined -Wno-error\" \\\n-DCMAKE_C_FLAGS=\"-Wno-error=expansion-to-defined -Wno-error\" \\\n-DWITH_DEBUG=1\n```\n\nI started facing new errors now, something like:\n```\n 3%] No configure step for 'libfmt'\nIn file included from /Users/himanshu.pandey/codes/gh-repos/my-maria-server/libmariadb/include/ma_global.h:152,\nfrom /Users/himanshu.pandey/codes/gh-repos/my-maria-server/libmariadb/libmariadb/get_password.c:19:\n/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/math.h:54:5: error: #error \"Unsupported value of __FLT_EVAL_METHOD__.\"\n54 | # error \"Unsupported value of __FLT_EVAL_METHOD__.\"\n| ^~~~~\n```\n\nI guess, `MariaDB` is using some value of `__FLT_EVAL_METHOD__` which is not supported by MacOS, I was bit surprised that MacOS libraries were being used, when I had explicitly mentioned to use \n`Homebrew`'s `gcc` compiler. I tried some approach to use the libraries of `gcc` but that was also of no use.\nI also set the values of these functions explicitly so that it is overriden during build stage. \nThere was some progress but then there were some errors on `CFI` directives like following:\n```\n/var/folders/95/n9tm7h4s46sdk134wgfzj8s40000gp/T//ccn7M7ep.s:36:2: error: this directive must appear between .cfi_startproc and .cfi_endproc directives\n.cfi_escape 0x07, 30\n^\nmake[2]: *** [libmariadb/libmariadb/CMakeFiles/mariadb_obj.dir/ma_context.c.o] Error 1\nmake[1]: *** [libmariadb/libmariadb/CMakeFiles/mariadb_obj.dir/all] Error 2\n```\n\nI asked `Chatgpt` and it told this happens when we do relocation on `ARM` systems, I figured it could be the mismatch between the machine configuration,\n> CFI directives are used by debuggers and unwinders to walk the call stack\nI presented my script to it to suggest modifications, it gave the following with Default clang version:\n```\ncmake .. -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_C_COMPILER=/usr/bin/clang \\\n-DCMAKE_CXX_COMPILER=/usr/bin/clang++ \\\n-DCMAKE_CXX_FLAGS=\"-Wno-error -D__FLT_EVAL_METHOD__=0\" \\\n-DCMAKE_C_FLAGS=\"-Wno-error -D__FLT_EVAL_METHOD__=0\" \\\n-DWITH_DEBUG=1 \\\n-DWITHOUT_TOKUDB=1 \\\n-DWITH_UNIT_TESTS=OFF \\\n-DWITH_SSL=system \\\n-DWITH_ZLIB=system \\\n-DCONC_WITH_EXTERNAL_ZLIB=ON \\\n-DWITHOUT_MROONGA=1 \\\n-DWITHOUT_ROCKSDB=1\n```\n\nThis script gave a lot of errors on `OPENSSL` casting. I added the flags to disable these warnings and disabled a lot of plugins that are by default enabled while building the server.\n\n> Update: 3rd June, 2025 -- Add a new flag CMakeList version flag because of wsrep-lib CMake Version\n\nAt the end, I created a script with the commands that I had to type again and again and it came out to look like following:\n\n\n```\n#!/bin/sh\n\n# Set paths\nMACOS_SDK=/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk\n\n# Common flags for both C and C++ (all in one line)\nCOMMON_FLAGS=\"-w \\\n-g \\\n-fno-asynchronous-unwind-tables \\\n-ffunction-sections \\\n-fdata-sections \\\n-fno-common \\\n-mmacosx-version-min=14.0 \\\n-arch arm64\"\n\n# Clean and create build directory\nrm -rf cmake-build-debug\nmkdir -p cmake-build-debug && cd cmake-build-debug\n\n# Run cmake with Clang\ncmake .. -DCMAKE_BUILD_TYPE=Debug \\\n-DCMAKE_C_COMPILER=clang \\\n-DCMAKE_CXX_COMPILER=clang++ \\\n-DCMAKE_C_FLAGS=\"${COMMON_FLAGS}\" \\\n-DCMAKE_CXX_FLAGS=\"${COMMON_FLAGS}\" \\\n-DCMAKE_OSX_SYSROOT=\"${MACOS_SDK}\" \\\n-DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 \\\n-DWITH_DEBUG=1 \\\n-DWITHOUT_TOKUDB=1 \\\n-DWITH_UNIT_TESTS=OFF \\\n-DWITH_SSL=system \\\n-DWITH_ZLIB=system \\\n-DCONC_WITH_EXTERNAL_ZLIB=ON \\\n-DWITHOUT_MROONGA=1 \\\n-DWITHOUT_ROCKSDB=1 \\\n-DPLUGIN_TOKUDB=NO \\\n-DPLUGIN_ROCKSDB=NO \\\n-DPLUGIN_MROONGA=NO \\\n-DCONNECT_WITH_MONGO=OFF \\\n-DCONNECT_WITH_BSON=OFF \\\n-DMYSQL_MAINTAINER_MODE=OFF \\  \n-DCMAKE_POLICY_VERSION_MINIMUM=3.5 \\\n-G Ninja\n\n# Build using ninja with parallel jobs and logging\ncmake --build . --parallel 5 2>&1 | tee build.log\n```\n\n\n## Running MariaDB locally\n\nYou can directly follow official [docs](https://mariadb.org/get-involved/getting-started-for-developers/get-code-build-test/);\n\nI will just summarize what I did:\n\n- Create a directory to store your data, I named it `mariaddb_data` and stored it in my\nhome directory\n- Create a configuration file like following\n\n```\n[client-server]\nsocket = path/to/mariadb.sock\n\n[mariadb]\ndatadir = path/to/mariadb_data\n```\n\n- Change directory to your build directory and run the following script\n```\n/scripts/mariadb-install-db \\\n--user=$(whoami) \\\n--datadir=path/to/mariadb_data \\\n--srcdir=path/to/server \\\n--defaults-file=path/to/mariadb.conf\n```\n\n- Open a new terminal session, `cd` to your build directory and start the server\n\n```\n./sql/mariadbd --defaults-file=path/to/mariadb.conf\n```\n\n- Start the client in new session\n```\n./client/mariadb --defaults-file=path/to/mariadb.conf\n```\n\nYou can then run the following commands and verify your build:\n```\nSHOW DATABASES;\nCREATE DATABASE testdb;\nUSE testdb;\nCREATE TABLE test (id INT, name VARCHAR(50));\nINSERT INTO test VALUES (1, 'Test User');\nSELECT * FROM test;\n```\n\n> Building and running it took most of my day, will write about internals in another blog post\n\n\n---- \n\n## References\n\n- [MariaDB official Docs](https://mariadb.org/get-involved/getting-started-for-developers/get-code-build-test/)\n- [ChatGPT](https://chatgpt.com/)\n- [CFI directives](https://sourceware.org/binutils/docs/as/CFI-directives.html)\n- [Configuration option](https://mariadb.com/kb/en/configuring-mariadb-with-option-files/)\n- [Understanding MySQL internals](https://www.amazon.in/Understanding-MySQL-Internals-Sasha-Pachev/dp/0596009577)\n",true,[9,10,11,12],"database","mariaDB","C++","Macbook"],"uses":{"params":["slug"]}}]}
